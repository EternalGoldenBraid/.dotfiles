# Math context to snippets { TO DO GO THRU}
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet beg "begin{} / end{}" iA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript two digits" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# Exponents
snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet td "superscript ^{}" iA
^{$1}$0
endsnippet

# Fractions
snippet \\ "fraction" i
\frac{$1}{$2}$0
endsnippet

# Other

snippet bl "\textbf" i 
\textbf{$1}$0
endsnippet

snippet abs "|x|" w
\left\| $1 \right\|$0
endsnippet

snippet lim "lim n --> infinity" i
\lim_{n \to \infty}
endsnippet

context "math()"
snippet sum "sum n=1 to infinity" w
\sum_{n=1}^{\infty}$0
endsnippet

context "math()"
snippet int "integral from x to y" wA
\int_{$1}^{$2}$0
endsnippet

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet bld "\textbf{}" mA
\textbf{$1}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet itl "\textit{}" mA
\textit{$1}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Calculus
snippet diff "\frac{d}{d}"
\diff{$1}{$2}$0
endsnippet
